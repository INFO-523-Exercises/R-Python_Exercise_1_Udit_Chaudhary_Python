# -*- coding: utf-8 -*-
"""R/Python_Exercise_1(Part 1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I15MZF2ExsDsrqGLkaPzR9mEZynTIqry

##**Introduction to Python**

###Elementary Data Types
"""

a = 3
print("A = ",a)
print(a, type(a))

b = True
print("B = ",b)
print(a, type(b))

c = 5.6
print("C = ",c)
print(a, type(c))

d = "Hi! Wellcome to Google Collab"
print("D = ",d)
print(a, type(d))

#The arithmetic operations that can be used to manipulate integers and floating point numbers include the following.

x = 2
x1 = x + 3
x2 = x * 2
x += 5
x3 = x
x *= 2
x4 = x
x5 = x%5

print(x,",",x1,",",x2,",",x3,",",x4,",",x5)

z = 4.6
z1 = z - 2.1
z2 = z/2
z3 = z//3
z4 = z ** 3
z5 = z4 ** 0.7
z6 = pow(z,3)
z7 = round(z)
z8 = int(z)

print(z,",",z1,",",z2,",",z3,",",z4)
print(z5,",",z6,",",z7,",",z8)

#The math module offers the following functions for integers and floating point numbers.

import math

x = 5
print(math.sqrt(x))
print(math.pow(x,3))
print(math.exp(x))
print(math.log(x,2))
print(math.fabs(-4))
print(math.factorial(x))

z = 0.6
print(math.ceil(z))
print(math.floor(z))
print(math.trunc(z))

z = 3*math.pi
print(math.sin(z))
print(math.tanh(z))

x = math.inf
print(math.isinf(x))

#The logical operations that are available for booleans include the following.

y1 = True
y2 = False

print(y1 and y2)
print(y1 or y2)
print(y1 and not y2)

#The following are a few string manipulation operations and functions.

s1 = "That"

print(s1[1:])
print(len(s1))
print("Lenght of string is "+ str(len(s1)))
print(s1.upper())
print(s1.lower())

s2 = "This is a house"
words = s2.split(' ')
print(words[0])
print(s2.replace('a','another'))
print(s2.replace('is','at'))
s2
print(s1 in s2)

print(s1 == 'That')
print(s1 < 'This')
print(s2 + 'too')
print((s1 + "")* 2)

"""###Compound Data Types"""

#The following examples show how to create and manipulate a list object

intlist = [2, 4, 6, 8, 10]
print(type(intlist))
print(intlist)
intlist2 = list(range(1,10,2))
print(intlist2)

print(intlist[2])
print(intlist[:2])
print(intlist[2:])
print(len(intlist))
print(sum(intlist))

intlist.append(12)
print(intlist)
print(intlist.pop())
print(intlist)

print(intlist + [12,14,16])
print(intlist * 2)
intlist.insert(1,3)
print(intlist)
intlist.sort(reverse=True)
print(intlist)

mylist = ['this', 'is', 'a', 'list']
print(mylist)
print(type(mylist))

print("list" in mylist)
print(mylist[2])
print(mylist[:2])
print(mylist[2:])
mylist.append("too")

seperator  = " "
print(seperator.join(mylist))
mylist.remove("is")
print(mylist)

#The examples below demonstrate how to construct and work with a dictionary object.

ab1 = {}
ab1['AZ'] = "Arizona"
ab1['PH'] = "Phoenix"
ab1['CA'] = "California"
ab1['LS'] = "LosAngeles"

print(ab1)
print(ab1.keys())
print(ab1.values())
print(len(ab1))

print(ab1.get('AZ'))
print("FL" in ab1)
print("CA" in ab1)

keys = ['apples', 'oranges', 'bananas', 'cherries']
values = [3, 4, 2, 10]
fruits = dict(zip(keys, values))
print(fruits)
print(sorted(fruits))

from operator import itemgetter
print(sorted(fruits.items(), key=itemgetter(0)))
print(sorted(fruits.items(), key = itemgetter(1)))

#The creation and handling of a tuple object are demonstrated in the examples below.
#A tuple object is immutable, compared to a list, meaning that it cannot be changed after creation.

TCtuple = ('TC', 'Tucson', 'Downtown')
CAtuple = ('CA', 'California', 'Sacramento')
TXtuple = ('TX', 'Texas', 'Austin')

print(TCtuple)
print(TCtuple[1:])

states = [TCtuple, CAtuple, TXtuple]
print(states)
print(states[2])
print(states[2][:])
print(states[2][1:])

states.sort(key = lambda state: state[2])
print(states)

"""###Control Flow Statements"""

#The if, for, and while statements are control flow statements in Python, much like in other programming languages.
#Below are some examples of how to utilize these statements.

x = 9

if x % 2 == 0:
  print("X = ", x, ", is even")
else:
  print("X = ", x, ", is odd")

if x > 0:
  print("X = ", x, ", is positive")
elif x < 0:
  print("X = ", x, ", is negative")
else:
  print("X = ", x, ", is neither positive nor negative")

# using for loop with a list

mlist = ['this', 'is', 'a', 'list']
for word in mlist:
  print(word.replace("is", "at"))

mlist2 = [len(word) for word in mlist]
print(mlist2)


# using for loop with list of tuples

states = [('AZ', 'Arizona', 'Phoenix'),('CA', 'California', 'Sacramento'),
          ('TX', 'Texas', 'Austin')]
sorted_capitals = [state[2] for state in states]
sorted_capitals.sort()
print(sorted_capitals)


# using for loop with dictionary

fruits = {'grapes': 7, 'peach': 2, 'coconut': 3, 'cherries': 8}
fruitnames = [k for (k,v) in fruits.items()]
print(fruitnames)

# using while loop

mlist = list(range(-10,10))
print(mlist)

i = 0
while(mlist[i] < 0):
  i = i+1

print("first non-negative number: ", mlist[i])

"""###User-Defined Functions"""

#In Python, you may write your own named or nameless functions.
#The lambda keyword is used to define unnamed functions, as seen in the preceding example for sorting a list of tuples.

myfun = lambda x: 2**x**3 - 3**x**2

print(myfun(2))

import math

# The following function will discard missing values from a list
def discar(inlist, sortFlag=False):    # default value for sortFlag is False
    outlist = []
    for item in inlist:
        if not math.isnan(item):
            outlist.append(item)

    if sortFlag:
        outlist.sort()
    return outlist

mylist = [11, math.nan, 12, -7, 5, math.nan, 61]

print(discar(mylist,True))

"""###File I/O"""

#You can read and write data from a list or other objects to a file.

states = [('AZ', 'Arizona', 'Phoenix'),('CA', 'California', 'Sacramento'),
          ('TX', 'Texas', 'Austin'), ('MN', 'Minnesota', 'St Paul')]

with open('states.txt', 'w') as f:
    f.write('\n'.join('%s,%s,%s' % state for state in states))

with open('states.txt', 'r') as f:
    for line in f:
        fields = line.split(sep=',')    # split each line into its respective fields
        print('State=',fields[1],'(',fields[0],')','Capital:', fields[2])